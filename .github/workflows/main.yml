name: Build Binary

on:
  push:
    branches: [main]

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # Current cl.exe is at C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.32.31326\bin\HostX64\x64
      - name: Windows - List Versions of MSVC
        if: runner.os == 'Windows'
        #shell: cmd
        run: |
          ls "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\"

      - uses: actions/checkout@v3

      - name: Linux - Install CUDA with just nvcc
        if: runner.os == 'Linux'
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          method: network
          sub-packages: '["nvcc"]'

      #- name: Windows - Install CUDA with nvcc and MSVC Integration
      #  if: runner.os == 'Windows'
      #  uses: Jimver/cuda-toolkit@v0.2.8
      #  with:
      #    method: local
      #    sub-packages: '["nvcc", "visual_studio_integration", "cudart"]'

      - name: Linux - Build Binary
        if: runner.os == 'Linux'
        run: nvcc -o matmul_cuda matmul_cuda.cu -O 3 -arch=all --extra-device-vectorization

      #- name: Windows - Build Binary
      #  if: runner.os == 'Windows'
      #  run: nvcc -o matmul_cuda matmul_cuda.cu -ccbin "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.32.31326\bin\HostX64\x64" -O 3 -arch=all --extra-device-vectorization
      #  #run: nvcc -o matmul_cuda matmul_cuda.cu -ccbin "$env:VCToolsInstallDir\bin\Hostx64\x64" -O 3 -arch=all --extra-device-vectorization

      - name: Windows - Fake Build Binary
        if: runner.os == 'Windows'
        run: echo This is a fake executable file for speed > matmul_cuda.exe

      - name: Windows - Upload Build
        uses: actions/upload-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: matmul_cuda_windows
          path: ./matmul_cuda.exe

      - name: Linux - Upload Build
        uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: matmul_cuda_linux
          path: ./matmul_cuda

  Release:
    name: "Pre Release"
    runs-on: "ubuntu-latest"
    needs: Build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Create a Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            /home/runner/work/matmul_cuda/matmul_cuda/matmul_cuda_linux
            /home/runner/work/matmul_cuda/matmul_cuda/matmul_cuda_windows
