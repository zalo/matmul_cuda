name: Build Binary

on:
  push:
    branches: [main]
  #pull_request:
  #workflow_dispatch:

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}

    steps:
      #- name: Windows - Enable CL.exe
      #  if: runner.os == 'Windows'
      #  uses: ilammy/msvc-dev-cmd@v1
      - name: List paths (windows)
        if: runner.os == 'Windows'
        #shell: powershell
        run: |
          ls %VCINSTALLDIR%\bin\

      - name: List paths (windows)
        if: runner.os == 'Windows'
        #shell: powershell
        run: |
          ls "C:\Program Files (x86)\Microsoft Visual Studio\Shared\VC\Tools\MSVC\"

      - name: List paths (windows)
        if: runner.os == 'Windows'
        #shell: powershell
        run: |
          ls "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\"
          ls "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\"
          ls "C:\Program Files (x86)\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\"

      - uses: actions/checkout@v3

      - name: Linux - Install CUDA with just nvcc
        if: runner.os == 'Linux'
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          method: network
          sub-packages: '["nvcc"]'

      - name: Windows - Install CUDA with nvcc and MSVC Integration
        if: runner.os == 'Windows'
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          method: local
          sub-packages: '["nvcc", "visual_studio_integration"]'

      #- name: Windows - Add CUDA Paths
      #  run: |
      #    export CPATH=/usr/local/cuda-11.0/targets/x86_64-linux/include:$CPATH
      #    export LD_LIBRARY_PATH=/usr/local/cuda-11.0/targets/x86_64-linux/lib:$LD_LIBRARY_PATH
      #    export PATH=/usr/local/cuda-11.0/bin:$PATH

      - name: List paths (windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include
          ls C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\
      - name: List paths (linux)
        if: runner.os == 'Linux'
        run: |
          ls $CUDA_PATH
          ls $CUDA_PATH/bin
          ls $CUDA_PATH/include

      - name: Test if nvcc is available
        run: nvcc -V

      - name: Build Binary
        run: nvcc -o matmul_cuda matmul_cuda.cu -O 3 -arch=all --extra-device-vectorization

      - name: Windows - Upload Build
        uses: actions/upload-artifact@v3
        if: runner.os == 'Windows'
        with:
          name: matmul_cuda
          path: ./matmul_cuda.exe

      - name: Linux - Upload Build
        uses: actions/upload-artifact@v3
        if: runner.os == 'Linux'
        with:
          name: matmul_cuda
          path: ./matmul_cuda
